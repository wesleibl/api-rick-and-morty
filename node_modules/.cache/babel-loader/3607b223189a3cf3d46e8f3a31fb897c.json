{"ast":null,"code":"var _jsxFileName = \"/home/wes/Wes/study/react/projetoFinal/rick-morty/src/components/Character.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport styles from '../components/css/Character.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Character(_ref) {\n  _s();\n\n  let {\n    id\n  } = _ref;\n  const [char, setChar] = useState([]);\n  const [planetOrigin, setPlanetOrigin] = useState([]);\n  const [episodeOne, setEpisodeOne] = useState([]);\n  const episodes = []; //character\n\n  useEffect(() => {\n    setTimeout(() => {\n      fetch(`https://rickandmortyapi.com/api/character/${id}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(resp => resp.json()).then(data => {\n        console.log(data);\n        setChar(data);\n        setPlanetOrigin(data.origin.name);\n\n        for (let i = 0; i < data.episode.length; i++) {\n          episodes.push(data.episode[i]);\n        }\n      }).catch(err => console.log(err));\n    }, 1000);\n  }, []); //episodes\n\n  useEffect(() => {\n    setTimeout(() => {\n      fetch(episodes[0], {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(resp => resp.json()).then(data => {\n        console.log(data.name);\n        console.log(episodes[0]);\n        console.log(episodeOne.name);\n      }).catch(err => console.log(err));\n    }, 1000);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.project_card,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: char.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: char.image,\n        alt: `${char.name}_img`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: char.status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Planeta de origem: \", planetOrigin]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"episodes:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Character, \"0NqoTjAb8clNsbtRAhgFP5ulDDM=\");\n\n_c = Character;\nexport default Character;\n\nvar _c;\n\n$RefreshReg$(_c, \"Character\");","map":{"version":3,"sources":["/home/wes/Wes/study/react/projetoFinal/rick-morty/src/components/Character.js"],"names":["useEffect","useState","styles","Character","id","char","setChar","planetOrigin","setPlanetOrigin","episodeOne","setEpisodeOne","episodes","setTimeout","fetch","method","headers","then","resp","json","data","console","log","origin","name","i","episode","length","push","catch","err","project_card","image","status"],"mappings":"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","sourcesContent":["import {useEffect, useState} from 'react'\n\nimport styles from '../components/css/Character.module.css'\n\nfunction Character({id}){\n\n    const [char, setChar] = useState([])\n    const [planetOrigin, setPlanetOrigin] = useState([])\n    const [episodeOne, setEpisodeOne] = useState([])\n    const episodes = [];\n\n    //character\n    useEffect(() => {\n        setTimeout(\n            () => {\n                fetch(`https://rickandmortyapi.com/api/character/${id}` , {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                })\n                    .then((resp) => resp.json())\n                    .then((data) => {\n                        console.log(data)\n                        setChar(data)\n                        setPlanetOrigin(data.origin.name)\n                        for (let i = 0; i < data.episode.length; i++){\n                            episodes.push(data.episode[i])\n                        }                   \n                        \n                    })\n                    .catch((err) => console.log(err))\n            }, 1000)\n    },[])\n    //episodes\n    useEffect(() => {\n        setTimeout(\n            () => {\n                fetch(episodes[0] , {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                })\n                    .then((resp) => resp.json())\n                    .then((data) => {\n                        console.log(data.name)\n                        console.log(episodes[0])\n                        console.log(episodeOne.name)      \n                    })\n                    .catch((err) => console.log(err))\n            }, 1000)\n    },[])\n\n    \n\n\n    return (\n        <div className={styles.project_card}>\n            <div>\n                <p>Name: <span>{char.name}</span></p>\n                <img src={char.image} alt={`${char.name}_img`}/>\n            </div>\n            <p>Status: <span>{char.status}</span></p>\n            <p>Planeta de origem: {planetOrigin}</p>\n            <p>episodes:</p>\n        </div>\n    )\n}\n\nexport default Character"]},"metadata":{},"sourceType":"module"}